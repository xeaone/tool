{
  "version": 3,
  "sources": ["../../decrypt/mod.ts"],
  "sourcesContent": ["const hexToBuffer = function (data: string) {\n    return Uint8Array.from(data.match(/.{2}/g) || [], (x) => parseInt(x, 16))\n        .buffer;\n};\n\nconst bufferToString = function (data: BufferSource) {\n    return new TextDecoder().decode(data);\n};\n\nconst stringToBuffer = function (data: string) {\n    return new TextEncoder().encode(data);\n};\n\nexport default async function decrypt(\n    data: string,\n    secret: string,\n    options?: {\n        tag?: number;\n        length?: number;\n        iterations?: number;\n\n        hash?: string;\n        algorithm?: string;\n        seperator?: string;\n    },\n): Promise<string> {\n    if (!data) throw new Error(' data required');\n    if (!secret) throw new Error('secret required');\n\n    const tag = options?.tag || 128;\n    const length = options?.length || 256;\n    const hash = options?.hash || 'SHA-256';\n    const seperator = options?.seperator || '.';\n    const algorithm = options?.algorithm || 'AES-GCM';\n    const iterations = options?.iterations || 100_000;\n\n    const parts = data.split(seperator);\n    const body = hexToBuffer(parts[0]);\n    const salt = hexToBuffer(parts[1]);\n    const vector = hexToBuffer(parts[2]);\n\n    const imported = await crypto.subtle.importKey(\n        'raw',\n        stringToBuffer(secret),\n        { name: 'PBKDF2' },\n        false,\n        ['deriveBits', 'deriveKey'],\n    );\n\n    const derived = await crypto.subtle.deriveKey(\n        { name: 'PBKDF2', salt, iterations, hash },\n        imported,\n        { name: algorithm, length },\n        true,\n        ['decrypt'],\n    );\n\n    const decrypted = await crypto.subtle.decrypt(\n        { iv: vector, name: algorithm, length, tagLength: tag },\n        derived,\n        body,\n    );\n\n    return bufferToString(decrypted);\n}\n"],
  "mappings": ";;;;;;;;;;AAAA,IAAM,cAAc,SAAU,MAAc;AACxC,SAAO,WAAW,KAAK,KAAK,MAAM,OAAO,KAAK,CAAC,GAAG,CAAC,MAAM,SAAS,GAAG,EAAE,CAAC,EACnE;AACT;AAEA,IAAM,iBAAiB,SAAU,MAAoB;AACjD,SAAO,IAAI,YAAY,EAAE,OAAO,IAAI;AACxC;AAEA,IAAM,iBAAiB,SAAU,MAAc;AAC3C,SAAO,IAAI,YAAY,EAAE,OAAO,IAAI;AACxC;AAEA,eAAO,QACH,MACA,QACA,SASe;AACf,MAAI,CAAC;AAAM,UAAM,IAAI,MAAM,gBAAgB;AAC3C,MAAI,CAAC;AAAQ,UAAM,IAAI,MAAM,iBAAiB;AAE9C,QAAM,MAAM,SAAS,OAAO;AAC5B,QAAM,SAAS,SAAS,UAAU;AAClC,QAAM,OAAO,SAAS,QAAQ;AAC9B,QAAM,YAAY,SAAS,aAAa;AACxC,QAAM,YAAY,SAAS,aAAa;AACxC,QAAM,aAAa,SAAS,cAAc;AAE1C,QAAM,QAAQ,KAAK,MAAM,SAAS;AAClC,QAAM,OAAO,YAAY,MAAM,CAAC,CAAC;AACjC,QAAM,OAAO,YAAY,MAAM,CAAC,CAAC;AACjC,QAAM,SAAS,YAAY,MAAM,CAAC,CAAC;AAEnC,QAAM,WAAW,MAAM,OAAO,OAAO;AAAA,IACjC;AAAA,IACA,eAAe,MAAM;AAAA,IACrB,EAAE,MAAM,SAAS;AAAA,IACjB;AAAA,IACA,CAAC,cAAc,WAAW;AAAA,EAC9B;AAEA,QAAM,UAAU,MAAM,OAAO,OAAO;AAAA,IAChC,EAAE,MAAM,UAAU,MAAM,YAAY,KAAK;AAAA,IACzC;AAAA,IACA,EAAE,MAAM,WAAW,OAAO;AAAA,IAC1B;AAAA,IACA,CAAC,SAAS;AAAA,EACd;AAEA,QAAM,YAAY,MAAM,OAAO,OAAO;AAAA,IAClC,EAAE,IAAI,QAAQ,MAAM,WAAW,QAAQ,WAAW,IAAI;AAAA,IACtD;AAAA,IACA;AAAA,EACJ;AAEA,SAAO,eAAe,SAAS;AACnC;",
  "names": []
}
