{
  "version": 3,
  "sources": ["http-fetch:https://deno.land/std@0.204.0/encoding/_util.ts", "http-fetch:https://deno.land/std@0.204.0/encoding/base64.ts", "http-fetch:https://deno.land/std@0.204.0/encoding/base64url.ts", "../../jwt/mod.ts", "../../connect/mod.ts"],
  "sourcesContent": ["// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.\n\nconst encoder = new TextEncoder();\n\nfunction getTypeName(value: unknown): string {\n  const type = typeof value;\n  if (type !== \"object\") {\n    return type;\n  } else if (value === null) {\n    return \"null\";\n  } else {\n    return value?.constructor?.name ?? \"object\";\n  }\n}\n\nexport function validateBinaryLike(source: unknown): Uint8Array {\n  if (typeof source === \"string\") {\n    return encoder.encode(source);\n  } else if (source instanceof Uint8Array) {\n    return source;\n  } else if (source instanceof ArrayBuffer) {\n    return new Uint8Array(source);\n  }\n  throw new TypeError(\n    `The input must be a Uint8Array, a string, or an ArrayBuffer. Received a value of the type ${\n      getTypeName(source)\n    }.`,\n  );\n}\n", "// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n\nimport { validateBinaryLike } from \"./_util.ts\";\n\n/**\n * {@linkcode encodeBase64} and {@linkcode decodeBase64} for\n * [base64](https://en.wikipedia.org/wiki/Base64) encoding.\n *\n * This module is browser compatible.\n *\n * @example\n * ```ts\n * import {\n *   decodeBase64,\n *   encodeBase64,\n * } from \"https://deno.land/std@$STD_VERSION/encoding/base64.ts\";\n *\n * const b64Repr = \"Zm9vYg==\";\n *\n * const binaryData = decodeBase64(b64Repr);\n * console.log(binaryData);\n * // => Uint8Array [ 102, 111, 111, 98 ]\n *\n * console.log(encodeBase64(binaryData));\n * // => Zm9vYg==\n * ```\n *\n * @module\n */\n\nconst base64abc = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"+\",\n  \"/\",\n];\n\n/**\n * @deprecated (will be removed in 0.210.0) Use a `encodeBase64` instead.\n *\n * CREDIT: https://gist.github.com/enepomnyaschih/72c423f727d395eeaa09697058238727\n * Encodes a given Uint8Array, ArrayBuffer or string into RFC4648 base64 representation\n * @param data\n */\nexport const encode = encodeBase64;\n\n/**\n * @deprecated (will be removed in 0.210.0) Use a `decodeBase64` instead.\n *\n * Decodes a given RFC4648 base64 encoded string\n * @param b64\n */\nexport const decode = decodeBase64;\n\n/**\n * Encodes a given Uint8Array, ArrayBuffer or string into RFC4648 base64 representation\n */\nexport function encodeBase64(data: ArrayBuffer | Uint8Array | string): string {\n  // CREDIT: https://gist.github.com/enepomnyaschih/72c423f727d395eeaa09697058238727\n  const uint8 = validateBinaryLike(data);\n  let result = \"\",\n    i;\n  const l = uint8.length;\n  for (i = 2; i < l; i += 3) {\n    result += base64abc[uint8[i - 2] >> 2];\n    result += base64abc[((uint8[i - 2] & 0x03) << 4) | (uint8[i - 1] >> 4)];\n    result += base64abc[((uint8[i - 1] & 0x0f) << 2) | (uint8[i] >> 6)];\n    result += base64abc[uint8[i] & 0x3f];\n  }\n  if (i === l + 1) {\n    // 1 octet yet to write\n    result += base64abc[uint8[i - 2] >> 2];\n    result += base64abc[(uint8[i - 2] & 0x03) << 4];\n    result += \"==\";\n  }\n  if (i === l) {\n    // 2 octets yet to write\n    result += base64abc[uint8[i - 2] >> 2];\n    result += base64abc[((uint8[i - 2] & 0x03) << 4) | (uint8[i - 1] >> 4)];\n    result += base64abc[(uint8[i - 1] & 0x0f) << 2];\n    result += \"=\";\n  }\n  return result;\n}\n\n/**\n * Decodes a given RFC4648 base64 encoded string\n */\nexport function decodeBase64(b64: string): Uint8Array {\n  const binString = atob(b64);\n  const size = binString.length;\n  const bytes = new Uint8Array(size);\n  for (let i = 0; i < size; i++) {\n    bytes[i] = binString.charCodeAt(i);\n  }\n  return bytes;\n}\n", "// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n\n/**\n * {@linkcode encodeBase64Url} and {@linkcode decodeBase64Url} for\n * [base64 URL safe](https://en.wikipedia.org/wiki/Base64#URL_applications) encoding.\n *\n * This module is browser compatible.\n *\n * @example\n * ```ts\n * import {\n *   decodeBase64Url,\n *   encodeBase64Url,\n * } from \"https://deno.land/std@$STD_VERSION/encoding/base64url.ts\";\n *\n * const binary = new TextEncoder().encode(\"foobar\");\n * const encoded = encodeBase64Url(binary);\n * console.log(encoded);\n * // => \"Zm9vYmFy\"\n *\n * console.log(decodeBase64Url(encoded));\n * // => Uint8Array(6) [ 102, 111, 111, 98, 97, 114 ]\n * ```\n *\n * @module\n */\n\nimport * as base64 from \"./base64.ts\";\n\n/*\n * Some variants allow or require omitting the padding '=' signs:\n * https://en.wikipedia.org/wiki/Base64#The_URL_applications\n * @param base64url\n */\nfunction addPaddingToBase64url(base64url: string): string {\n  if (base64url.length % 4 === 2) return base64url + \"==\";\n  if (base64url.length % 4 === 3) return base64url + \"=\";\n  if (base64url.length % 4 === 1) {\n    throw new TypeError(\"Illegal base64url string!\");\n  }\n  return base64url;\n}\n\nfunction convertBase64urlToBase64(b64url: string): string {\n  if (!/^[-_A-Z0-9]*?={0,2}$/i.test(b64url)) {\n    // Contains characters not part of base64url spec.\n    throw new TypeError(\"Failed to decode base64url: invalid character\");\n  }\n  return addPaddingToBase64url(b64url).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n}\n\nfunction convertBase64ToBase64url(b64: string) {\n  return b64.endsWith(\"=\")\n    ? b64.endsWith(\"==\")\n      ? b64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").slice(0, -2)\n      : b64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").slice(0, -1)\n    : b64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\n/**\n * @deprecated (will be removed in 0.210.0) Use a `encodeBase64Url` instead.\n *\n * Encodes a given ArrayBuffer or string into a base64url representation\n * @param data\n */\nexport const encode = encodeBase64Url;\n\n/**\n * @deprecated (will be removed in 0.210.0) Use a `decodeBase64Url` instead.\n *\n * Converts given base64url encoded data back to original\n * @param b64url\n */\nexport const decode = decodeBase64Url;\n\n/**\n * Encodes a given ArrayBuffer or string into a base64url representation\n * @param data\n */\nexport function encodeBase64Url(\n  data: ArrayBuffer | Uint8Array | string,\n): string {\n  return convertBase64ToBase64url(base64.encodeBase64(data));\n}\n\n/**\n * Converts given base64url encoded data back to original\n * @param b64url\n */\nexport function decodeBase64Url(b64url: string): Uint8Array {\n  return base64.decodeBase64(convertBase64urlToBase64(b64url));\n}\n", "import * as base64url from 'https://deno.land/std@0.204.0/encoding/base64url.ts';\nimport * as base64 from 'https://deno.land/std@0.204.0/encoding/base64.ts';\n\nexport type Header = {\n    alg: 'RS256';\n    [key: string]: unknown;\n};\n\nexport type Payload = {\n    iss: string;\n    aud: string;\n    exp: number;\n    iat: number;\n    scope: string;\n};\n\nconst encoder = new TextEncoder();\n\nexport default async function (\n    header: Header,\n    payload: Payload,\n    secret: string,\n): Promise<string> {\n    const encodedHeader = base64url.encode(JSON.stringify(header));\n    const encodedPayload = base64url.encode(JSON.stringify(payload));\n    const data = encoder.encode(`${encodedHeader}.${encodedPayload}`);\n\n    const cleanedKey = secret.replace(\n        /^\\n?-----BEGIN PRIVATE KEY-----\\n?|\\n?-----END PRIVATE KEY-----\\n?$/g,\n        '',\n    );\n    const decodedKey = base64.decode(cleanedKey).buffer;\n    const key = await crypto.subtle.importKey(\n        'pkcs8',\n        decodedKey,\n        { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-256' },\n        true,\n        ['sign'],\n    );\n\n    const signature = await crypto.subtle.sign(\n        { hash: { name: 'SHA-256' }, name: 'RSASSA-PKCS1-v1_5' },\n        key,\n        data,\n    );\n    const encodedSignature = base64url.encode(signature);\n\n    return `${encodedHeader}.${encodedPayload}.${encodedSignature}`;\n}\n", "import jwt from '../jwt/mod.ts';\n\n// https://developers.google.com/identity/protocols/oauth2/service-account\ntype ServiceAccountCredentials = {\n    type: 'service_account';\n    project_id: string;\n    private_key_id: string;\n    private_key: string;\n    client_email: string;\n    client_id: string;\n    auth_uri?: string;\n    token_uri?: string;\n    client_x509_cert_url?: string;\n    auth_provider_x509_cert_url?: string;\n};\n\n// https://developers.google.com/identity/protocols/oauth2/web-server#offline\ntype ApplicationDefaultCredentials = {\n    type: 'authorized_user';\n    client_id: string;\n    client_secret: string;\n    grant_type: string;\n    refresh_token: string;\n};\n\ntype Credential =\n    | 'meta'\n    | 'application'\n    | ApplicationDefaultCredentials\n    | ServiceAccountCredentials;\n\ntype Options = {\n    project?: string;\n    timeout?: number;\n    attempts?: number;\n    // credential?: Credential;\n    serviceAccountCredentials?: ServiceAccountCredentials;\n    applicationDefaultCredentials?: ApplicationDefaultCredentials;\n};\n\nclass Google {\n    #token?: string;\n    #expires?: number;\n    #project?: string;\n    #attempts = 5;\n    #timeout = 1000;\n    #serviceAccountCredentials?: ServiceAccountCredentials;\n    #applicationDefaultCredentials?: ApplicationDefaultCredentials;\n\n    constructor(options?: Options) {\n        this.#project = options?.project;\n        this.#timeout = options?.timeout ?? this.#timeout;\n        this.#attempts = options?.attempts ?? this.#attempts;\n        this.#serviceAccountCredentials = options?.serviceAccountCredentials;\n        this.#applicationDefaultCredentials = options?.applicationDefaultCredentials;\n    }\n\n    async #auth(attempts: number) {\n        if (this.#expires && this.#expires >= Date.now()) return;\n\n        let response;\n        if (this.#applicationDefaultCredentials) {\n            response = await fetch('https://oauth2.googleapis.com/token', {\n                method: 'POST',\n                signal: AbortSignal.timeout(this.#timeout * attempts),\n                body: new URLSearchParams(this.#applicationDefaultCredentials),\n            });\n        } else if (this.#serviceAccountCredentials) {\n            const { client_email, private_key } = this.#serviceAccountCredentials;\n            const iss = client_email;\n            const iat = Math.round(Date.now() / 1000);\n            const exp = iat + (30 * 60);\n            const aud = 'https://oauth2.googleapis.com/token';\n            const scope = 'https://www.googleapis.com/auth/datastore';\n            const assertion = await jwt({ typ: 'JWT', alg: 'RS256' }, { exp, iat, iss, aud, scope }, private_key);\n            const grant_type = 'urn:ietf:params:oauth:grant-type:jwt-bearer';\n            response = await fetch('https://oauth2.googleapis.com/token', {\n                method: 'POST',\n                signal: AbortSignal.timeout(this.#timeout * attempts),\n                body: new URLSearchParams({ assertion, grant_type }),\n            });\n        } else {\n            try {\n                response = await fetch(\n                    'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token',\n                    {\n                        method: 'GET',\n                        signal: AbortSignal.timeout(this.#timeout * attempts),\n                        headers: { 'Metadata-Flavor': 'Google' },\n                    },\n                );\n            } catch (error) {\n                console.log('here');\n                if (error?.name !== 'TimeoutError') {\n                    throw new Error('credentials required');\n                } else {\n                    throw error;\n                }\n            }\n        }\n\n        if (response.status !== 200) {\n            throw new Error(`${response.status} ${response.statusText} ${await response.text()}`);\n        }\n\n        const result = await response.json();\n\n        this.#token = result.access_token;\n        this.#expires = Date.now() + (result.expires_in * 1000);\n    }\n\n    applicationDefault(\n        applicationDefaultCredentials: ApplicationDefaultCredentials,\n    ) {\n        this.#applicationDefaultCredentials = {\n            ...applicationDefaultCredentials,\n            grant_type: 'refresh_token',\n        };\n        return this;\n    }\n\n    serviceAccount(serviceAccountCredentials: ServiceAccountCredentials) {\n        this.#serviceAccountCredentials = { ...serviceAccountCredentials };\n        return this;\n    }\n\n    /**\n     * @description\n     *      Initialize application default credentials with `gcloud auth application-default login`.\n     *      This file should be created and will be used as the application credential:\n     *      - Windows: %APPDATA%\\gcloud\\application_default_credentials.json\n     *      - Linux/Mac: $HOME/.config/gcloud/application_default_credentials.json\n     * @param credential\n     */\n    credential(credential: Credential) {\n        // const command = await new Deno.Command('gcloud', {\n        //     args: ['auth', 'application-default', 'print-access-token'],\n        //     stderr: 'inherit',\n        // }).output();\n        // result = {\n        //     expires_in: 3599,\n        //     access_token: new TextDecoder().decode(command.stdout),\n        // };\n\n        if (credential === 'meta') {\n            return;\n        } else if (credential === 'application') {\n            let file;\n\n            try {\n                const prefix = Deno.build.os === 'windows' ? Deno.env.get('APPDATA') : `${Deno.env.get('HOME')}/.config`;\n                file = Deno.readTextFileSync(\n                    `${prefix}/gcloud/application_default_credentials.json`,\n                );\n            } catch {\n                return;\n            }\n\n            const data = JSON.parse(file);\n            this.#applicationDefaultCredentials = {\n                ...data,\n                grant_type: 'refresh_token',\n            };\n        } else if (credential.type === 'authorized_user') {\n            this.applicationDefault(\n                credential as ApplicationDefaultCredentials,\n            );\n        } else if (credential.type === 'service_account') {\n            this.serviceAccount(credential as ServiceAccountCredentials);\n        } else {\n            throw new Error('credential option required');\n        }\n    }\n\n    /**\n     * @description\n     * @param {String} data\n     * @returns {Google}\n     */\n    project(data: string): this {\n        this.#project = data;\n        return this;\n    }\n\n    /**\n     * @description Sets the max request time. Defaults to 1000ms.\n     * @param {Number} timeout The milliseconds for request a timeout.\n     * @return {Google}\n     */\n    timeout(timeout: number): this {\n        this.#timeout = timeout;\n        return this;\n    }\n\n    /**\n     * @description Sets the max retry atttempts after request timeout. Defaults to 5.\n     * @param {Number} attempts The amount of attempts for timeout retries.\n     * @return {Google}\n     */\n    attempts(attempts: number): this {\n        this.#attempts = attempts;\n        return this;\n    }\n\n    async fetch(input: string | URL | Request, init?: RequestInit, attempts?: number): Promise<any> {\n        attempts = attempts || 1;\n        try {\n            if (!this.project) {\n                const projectResponse = await fetch(\n                    'http://metadata.google.internal/computeMetadata/v1/project/project-id',\n                    {\n                        method: 'GET',\n                        headers: { 'Metadata-Flavor': 'Google' },\n                        signal: AbortSignal.timeout(this.#timeout * attempts),\n                    },\n                );\n\n                this.#project = await projectResponse.text();\n            }\n\n            if (!this.#project) throw new Error('project required');\n\n            await this.#auth(attempts);\n\n            init = init ?? {};\n            init.signal = AbortSignal.timeout(this.#timeout * attempts);\n\n            const request = new Request(input, init);\n\n            if (this.#token) request.headers.set('Authorization', `Bearer ${this.#token}`);\n\n            const response = await fetch(request);\n\n            return response;\n        } catch (error) {\n            if (error?.name === 'TimeoutError' && attempts <= this.#attempts) {\n                return this.fetch(input, init, attempts + 1);\n            } else {\n                throw error;\n            }\n        }\n    }\n}\n\nexport default {\n    Google,\n};\n"],
  "mappings": "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",
  "names": ["encoder", "mod_default"]
}
