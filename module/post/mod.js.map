{
  "version": 3,
  "sources": ["../../post/mod.ts"],
  "sourcesContent": ["type BeforePost = (data: any, url: URL) => void;\ntype DuringPost = (data: any, url: URL, code: number) => void;\ntype AfterPost = (data: any, url: URL, code: number) => void;\n\ntype PostOptions = {\n    beforePost?: BeforePost;\n    duringPost?: DuringPost;\n    afterPost?: AfterPost;\n};\n\nexport default class Post {\n    beforePost?: BeforePost;\n    duringPost?: DuringPost;\n    afterPost?: AfterPost;\n\n    constructor(options: PostOptions) {\n        this.beforePost = options?.beforePost;\n        this.duringPost = options?.duringPost;\n        this.afterPost = options?.afterPost;\n    }\n\n    async method(path: string, data: any): Promise<string | Record<any, any>> {\n        const url = new URL(path, globalThis.location.origin);\n\n        await this.beforePost?.(data, url);\n\n        try {\n            data = JSON.stringify(data);\n        } catch { /**/ }\n\n        const response = await globalThis.fetch(url.href, {\n            method: 'POST',\n            body: data,\n        });\n\n        if (!response.body) {\n            await this.afterPost?.(\n                data,\n                new URL(response.url),\n                response.status,\n            );\n            return {};\n        }\n\n        data = '';\n        const decoder = new TextDecoder();\n        const reader = response.body.getReader();\n\n        let result = await reader.read();\n\n        while (!result.done) {\n            data += decoder.decode(result.value, { stream: true });\n            await this.duringPost?.(\n                data,\n                new URL(response.url),\n                response.status,\n            );\n            result = await reader.read();\n        }\n\n        try {\n            data = JSON.parse(data);\n        } catch { /**/ }\n\n        await this.afterPost?.(data, new URL(response.url), response.status);\n\n        return data;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;AAUA,IAAqB,OAArB,MAA0B;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,SAAsB;AAC9B,SAAK,aAAa,SAAS;AAC3B,SAAK,aAAa,SAAS;AAC3B,SAAK,YAAY,SAAS;AAAA,EAC9B;AAAA,EAEA,MAAM,OAAO,MAAc,MAA+C;AACtE,UAAM,MAAM,IAAI,IAAI,MAAM,WAAW,SAAS,MAAM;AAEpD,UAAM,KAAK,aAAa,MAAM,GAAG;AAEjC,QAAI;AACA,aAAO,KAAK,UAAU,IAAI;AAAA,IAC9B,QAAQ;AAAA,IAAO;AAEf,UAAM,WAAW,MAAM,WAAW,MAAM,IAAI,MAAM;AAAA,MAC9C,QAAQ;AAAA,MACR,MAAM;AAAA,IACV,CAAC;AAED,QAAI,CAAC,SAAS,MAAM;AAChB,YAAM,KAAK;AAAA,QACP;AAAA,QACA,IAAI,IAAI,SAAS,GAAG;AAAA,QACpB,SAAS;AAAA,MACb;AACA,aAAO,CAAC;AAAA,IACZ;AAEA,WAAO;AACP,UAAM,UAAU,IAAI,YAAY;AAChC,UAAM,SAAS,SAAS,KAAK,UAAU;AAEvC,QAAI,SAAS,MAAM,OAAO,KAAK;AAE/B,WAAO,CAAC,OAAO,MAAM;AACjB,cAAQ,QAAQ,OAAO,OAAO,OAAO,EAAE,QAAQ,KAAK,CAAC;AACrD,YAAM,KAAK;AAAA,QACP;AAAA,QACA,IAAI,IAAI,SAAS,GAAG;AAAA,QACpB,SAAS;AAAA,MACb;AACA,eAAS,MAAM,OAAO,KAAK;AAAA,IAC/B;AAEA,QAAI;AACA,aAAO,KAAK,MAAM,IAAI;AAAA,IAC1B,QAAQ;AAAA,IAAO;AAEf,UAAM,KAAK,YAAY,MAAM,IAAI,IAAI,SAAS,GAAG,GAAG,SAAS,MAAM;AAEnE,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
