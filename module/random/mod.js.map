{
  "version": 3,
  "sources": ["../../random/mod.ts"],
  "sourcesContent": ["// const symbol1Start = 33;\n// const symbol1End = 47;\n\n// const numberStart = 48;\n// const numberEnd = 57;\n\n// const symbol2Start = 58;\n// const symbol2End = 64;\n\n// const upperStart = 65;\n// const upperEnd = 90;\n\n// const symbol3Start = 91;\n// const symbol3End = 96;\n\n// const lowerStart = 97;\n// const lowerEnd = 122;\n\n// const symbol4Start = 123;\n// const symbol4End = 126;\n\n// const anyStart = 33;\n// const anyEnd = 126;\n\n// export const randomNumber = (): string => String.fromCharCode(randomInteger(numberStart, numberEnd));\n// export const randomUpper = (): string => String.fromCharCode(randomInteger(upperStart, upperEnd));\n// export const randomLower = (): string => String.fromCharCode(randomInteger(lowerStart, lowerEnd));\n// export const randomAny = (): string => String.fromCharCode(randomInteger(anyStart, anyEnd));\n\nconst symbols = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~';\nconst uppers = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst lowers = 'abcdefghijklmnopqrstuvwxyz';\nconst numbers = '0123456789';\n\n// export const randomInteger = (min = 0, max = 255): number => {\n//     if (typeof min !== 'number') throw new Error('min number required');\n//     if (typeof max !== 'number') throw new Error('max number required');\n//     if (min === max) throw new Error('min and max must be different');\n//     if (min > max) throw new Error('min must be less than max');\n//     if (max > 255) throw new Error('max must be less than 256');\n\n//     const bytes = new Uint8Array(1);\n\n//     let result;\n//     do {\n//         result = crypto.getRandomValues(bytes)[0];\n//     } while (result < min || result > max);\n\n//     return result;\n// };\n\n/**\n * @link https://gist.github.com/sarciszewski/88a7ed143204d17c3e42\n * @link https://github.com/joepie91/node-random-number-csprng/blob/master/src/index.js\n * @link https://stackoverflow.com/questions/41437492/how-to-use-window-crypto-getrandomvalues-to-get-random-values-in-a-specific-rang\n * @link https://stackoverflow.com/questions/3956478/understanding-randomness\n * @link https://en.wikipedia.org/wiki/Discrete_uniform_distribution\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nexport const randomInteger = (min: number, max: number): number => {\n    if (typeof min !== 'number') throw new Error('min number required');\n    if (typeof max !== 'number') throw new Error('max number required');\n    if (min >= max) throw new Error('min must be less than max');\n\n    const range = max - min + 1;\n    const bits = Math.ceil(Math.log2(range));\n    const bytes = Math.ceil(bits / 8);\n    const mask = Math.pow(2, bits) - 1;\n    const values = new Uint8Array(bytes);\n\n    let value, index;\n    do {\n        window.crypto.getRandomValues(values);\n\n        // bitwise OR and LeftShift operations\n        // turn the bytes into an integer\n        value = 0;\n        for (index = 0; index < bytes; index++) {\n            value = value | values[index] << (8 * index);\n        }\n\n        // bitwise AND operation\n        // apply a mask to reduce the amount of attempts\n        value = value & mask;\n    } while (value < min || value > max);\n    // } while (value >= range);\n\n    // return value + min;\n    return value;\n};\n\n/**\n * @description Generates a secure random string of configurable length which can include upper, lower, symbol, or number chars.\n * @param {Object}\n * @returns {String}\n */\nexport const randomString = ({\n    length = 8,\n    upper = true,\n    lower = true,\n    symbol = true,\n    number = true,\n}: {\n    length?: number;\n    upper?: boolean;\n    lower?: boolean;\n    symbol?: boolean;\n    number?: boolean;\n} = {\n    length: 8,\n    upper: true,\n    lower: true,\n    symbol: true,\n    number: true,\n}): string => {\n    if (typeof length !== 'number') throw new Error('length number required');\n    if (typeof upper !== 'boolean') throw new Error('upper boolean required');\n    if (typeof lower !== 'boolean') throw new Error('lower boolean required');\n    if (typeof symbol !== 'boolean') throw new Error('symbol boolean required');\n    if (typeof number !== 'boolean') throw new Error('number boolean required');\n\n    if (length < 4) throw new Error('length must be greater than or equal to 4');\n    if (!upper && !lower && !symbol && !number) throw new Error('upper, lower, symbol, or number required');\n\n    const characters = [\n        upper ? uppers : '',\n        lower ? lowers : '',\n        symbol ? symbols : '',\n        number ? numbers : '',\n    ].join('');\n\n    const startCharacterIndex = 0;\n    const endCharacterIndex = characters.length - 1;\n\n    const positions: number[] = [];\n    const result: string[] = [];\n\n    for (let index = 0; index < length; index++) {\n        positions.push(index);\n        result.push(characters[randomInteger(startCharacterIndex, endCharacterIndex)]);\n    }\n\n    if (upper) {\n        const positionInteger = randomInteger(0, positions.length - 1);\n        const [resultInteger] = positions.splice(positionInteger, 1);\n        result[resultInteger] = uppers[randomInteger(0, uppers.length - 1)];\n    }\n\n    if (lower) {\n        const positionInteger = randomInteger(0, positions.length - 1);\n        const [resultInteger] = positions.splice(positionInteger, 1);\n        result[resultInteger] = lowers[randomInteger(0, lowers.length - 1)];\n    }\n\n    if (symbol) {\n        const positionInteger = randomInteger(0, positions.length - 1);\n        const [resultInteger] = positions.splice(positionInteger, 1);\n        result[resultInteger] = symbols[randomInteger(0, symbols.length - 1)];\n    }\n\n    if (number) {\n        const positionInteger = randomInteger(0, positions.length - 1);\n        const [resultInteger] = positions.splice(positionInteger, 1);\n        result[resultInteger] = numbers[randomInteger(0, numbers.length - 1)];\n    }\n\n    return result.join('');\n};\n\nexport default {\n    integer: randomInteger,\n    string: randomString,\n} as const;\n"],
  "mappings": "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",
  "names": []
}
